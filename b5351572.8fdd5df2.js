(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{234:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return c})),t.d(a,"rightToc",(function(){return s})),t.d(a,"default",(function(){return l}));var n=t(1),r=t(9),i=(t(0),t(297)),c={id:"create-single-spa",title:"create-single-spa",sidebar_label:"create-single-spa"},s=[{value:"Installation and Usage",id:"installation-and-usage",children:[]},{value:"CLI arguments",id:"cli-arguments",children:[{value:"--dir",id:"--dir",children:[]},{value:"--moduleType",id:"--moduletype",children:[]},{value:"--framework",id:"--framework",children:[]}]},{value:"Project types",id:"project-types",children:[]},{value:"create-single-spa",id:"create-single-spa",children:[]},{value:"generator-single-spa",id:"generator-single-spa",children:[]},{value:"webpack-config-single-spa",id:"webpack-config-single-spa",children:[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]}]},{value:"webpack-config-single-spa-react",id:"webpack-config-single-spa-react",children:[{value:"Installation",id:"installation-1",children:[]},{value:"Usage",id:"usage-1",children:[]}]}],o={rightToc:s},p="wrapper";function l(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(p,Object(n.a)({},o,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Single-spa offers a CLI for those who prefer autogenerated and managed configurations for webpack, babel, jest, etc. You do not have to use the CLI in order to use single-spa."),Object(i.b)("p",null,"The CLI is called ",Object(i.b)("inlineCode",{parentName:"p"},"create-single-spa")," (",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/"}),"Github link"),"). It is intended for the creation of new projects and for updating projects that were created via ",Object(i.b)("inlineCode",{parentName:"p"},"create-single-spa"),", but it is not intended for migrating pre-existing codebases to single-spa."),Object(i.b)("h2",{id:"installation-and-usage"},"Installation and Usage"),Object(i.b)("p",null,"If you wish to have create-single-spa globally available, run the following in a terminal"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"npm install --global create-single-spa\n\n# or\nyarn global add create-single-spa\n")),Object(i.b)("p",null,"Then run the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"create-single-spa\n")),Object(i.b)("p",null,"Alternatively, you may use create-single-spa without global installation:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"npm init single-spa\n\n# or\nnpx create-single-spa\n\n# or \nyarn create single-spa\n")),Object(i.b)("p",null,"This will open up a CLI prompt asking you what kind of project you want to create or update."),Object(i.b)("h2",{id:"cli-arguments"},"CLI arguments"),Object(i.b)("p",null,"You may pass arguments to create-single-spa like so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"# Different ways of doing the same thing\ncreate-single-spa --framework react\nnpm init single-spa --framework react\nnpx create-single-spa --framework react\nyarn create single-spa --framework react\n")),Object(i.b)("p",null,"Here are the available CLI options:"),Object(i.b)("h3",{id:"--dir"},"--dir"),Object(i.b)("p",null,"You may specify which directory create-single-spa runs in the following ways:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"# Two ways of doing the same thing\ncreate-single-spa my-dir\ncreate-single-spa --dir my-dir\n")),Object(i.b)("h3",{id:"--moduletype"},"--moduleType"),Object(i.b)("p",null,"You can specify which kind of microfrontend you are creating with the ",Object(i.b)("inlineCode",{parentName:"p"},"--moduleType")," CLI argument:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"create-single-spa --moduleType root-config\ncreate-single-spa --moduleType app-parcel\ncreate-single-spa --moduleType util-module\n")),Object(i.b)("h3",{id:"--framework"},"--framework"),Object(i.b)("p",null,"You can specify which framework you're using with the ",Object(i.b)("inlineCode",{parentName:"p"},"--framework")," CLI argument. Note that if you specify a framework that you may omit the ",Object(i.b)("inlineCode",{parentName:"p"},"--moduleType"),", as it is inferred to be ",Object(i.b)("inlineCode",{parentName:"p"},"app-parcel"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"create-single-spa --framework react\ncreate-single-spa --framework vue\ncreate-single-spa --framework angular\n")),Object(i.b)("h2",{id:"project-types"},"Project types"),Object(i.b)("p",null,"create-single-spa asks you if you'd like to create a single-spa application, a utility module, or a root-config. All three module types assume that you are using the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/recommended-setup"}),"recommended setup"),"."),Object(i.b)("p",null,"If you select that you'd like to create a single-spa application, you will be prompted for which framework you'd like to choose. React is implemented with premade configurations for babel + webpack + jest. Angular is implemented with Angular CLI and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:""}),"single-spa-angular"),". Vue is implemented with Vue CLI and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/ecosystem/ecosystem-vue#vue-cli"}),"vue-cli-plugin-single-spa"),"."),Object(i.b)("h1",{id:"npm-packages"},"NPM packages"),Object(i.b)("p",null,"Within the create-single-spa repo, there are several NPM packages. The following sections document each package:"),Object(i.b)("h2",{id:"create-single-spa"},"create-single-spa"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/tree/master/packages/create-single-spa"}),"Github project")),Object(i.b)("p",null,"The core CLI, which invokes ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#generator-single-spa"}),"generator-single-spa"),"."),Object(i.b)("h2",{id:"generator-single-spa"},"generator-single-spa"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/tree/master/packages/generator-single-spa"}),"Github project")),Object(i.b)("p",null,"A ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://yeoman.io/"}),"Yeoman generator")," that prompts the user and then creates files. This is primarily invoked via the create-single-spa CLI, but can also be ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://yeoman.io/authoring/composability.html"}),"composed")," if you'd like to customize it."),Object(i.b)("h2",{id:"webpack-config-single-spa"},"webpack-config-single-spa"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/tree/master/packages/webpack-config-single-spa"}),"Github project")),Object(i.b)("p",null,"A shareable, customizable webpack config that is used for utility modules and React single-spa applications."),Object(i.b)("h3",{id:"installation"},"Installation"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"npm install --save-dev webpack-config-single-spa webpack-merge\n\nyarn add --dev webpack-config-single-spa webpack-merge\n")),Object(i.b)("h3",{id:"usage"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const webpackMerge = require('webpack-merge');\nconst singleSpaDefaults = require('webpack-config-single-spa');\n\nmodule.exports = webpackConfigEnv => {\n  const defaultConfig = singleSpaDefaults({\n    // The name of the organization this application is written for\n    orgName: 'name-of-company',\n    // The name of the current project. This usually matches the git repo's name\n    projectName: 'name-of-project',\n    // If your project uses typescript, set typecheck. Otherwise, omit it.\n    typecheck: 'typescript',\n    // Set to true if your project uses react\n    react: true,\n    // See https://webpack.js.org/guides/environment-variables/#root for explanation of webpackConfigEnv\n    webpackConfigEnv,\n  })\n\n  return webpackMerge.smart(defaultConfig, {\n    // modify the webpack config however you'd like to by adding to this object\n  })\n}\n")),Object(i.b)("h2",{id:"webpack-config-single-spa-react"},"webpack-config-single-spa-react"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/single-spa/create-single-spa/tree/master/packages/webpack-config-single-spa-react"}),"Github project")),Object(i.b)("p",null,"A shareable, customizable webpack config that adds react-specific configuration to ",Object(i.b)("inlineCode",{parentName:"p"},"webpack-config-single-spa"),"."),Object(i.b)("h3",{id:"installation-1"},"Installation"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"npm install --save-dev webpack-config-single-spa-react webpack-merge\n\nyarn add --dev webpack-config-single-spa-react webpack-merge\n")),Object(i.b)("h3",{id:"usage-1"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const webpackMerge = require('webpack-merge');\nconst singleSpaDefaults = require('webpack-config-single-spa');\n\nmodule.exports = webpackConfigEnv => {\n  const defaultConfig = singleSpaDefaults({\n    // The name of the organization this application is written for\n    orgName: 'name-of-company',\n    // The name of the current project. This usually matches the git repo's name\n    projectName: 'name-of-project',\n    // If your project uses typescript, set typecheck. Otherwise, omit it.\n    typecheck: 'typescript',\n    // See https://webpack.js.org/guides/environment-variables/#root for explanation of webpackConfigEnv\n    webpackConfigEnv,\n  })\n\n  return webpackMerge.smart(defaultConfig, {\n    // modify the webpack config however you'd like to by adding to this object\n  })\n}\n")))}l.isMDXComponent=!0},297:function(e,a,t){"use strict";t.d(a,"a",(function(){return s})),t.d(a,"b",(function(){return b}));var n=t(0),r=t.n(n),i=r.a.createContext({}),c=function(e){var a=r.a.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):Object.assign({},a,e)),t},s=function(e){var a=c(e.components);return r.a.createElement(i.Provider,{value:a},e.children)};var o="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},l=Object(n.forwardRef)((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,o=function(e,a){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===a.indexOf(n)&&(t[n]=e[n]);return t}(e,["components","mdxType","originalType","parentName"]),l=c(t),b=n,g=l[s+"."+b]||l[b]||p[b]||i;return t?r.a.createElement(g,Object.assign({},{ref:a},o,{components:t})):r.a.createElement(g,Object.assign({},{ref:a},o))}));function b(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,c=new Array(i);c[0]=l;var s={};for(var p in a)hasOwnProperty.call(a,p)&&(s[p]=a[p]);s.originalType=e,s[o]="string"==typeof e?e:n,c[1]=s;for(var b=2;b<i;b++)c[b]=t[b];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}l.displayName="MDXCreateElement"}}]);